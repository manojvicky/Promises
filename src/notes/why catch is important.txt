// Error handling
// As we saw earlier, then() takes two arguments, one for success, one for failure (or fulfill and reject, in promises-speak):

get('story.json').then(function(response) {
    console.log("Success!", response);
  }, function(error) {
    console.log("Failed!", error);
  })

//   You can also use catch():

get('story.json').then(function(response) {
    console.log("Success!", response);
  }).catch(function(error) {
    console.log("Failed!", error);
  })

//   There's nothing special about catch(), it's just sugar for then(undefined, func), but it's more readable. Note that the two code examples above do not behave the same, the latter is equivalent to:

get('story.json').then(function(response) {
    console.log("Success!", response);
  }).then(undefined, function(error) {
    console.log("Failed!", error);
  })

//   The difference is subtle, but extremely useful. Promise rejections skip forward to the next then() with a rejection callback (or catch(), since it's equivalent). With then(func1, func2), func1 or func2 will be called, never both. But with then(func1).catch(func2), both will be called if func1 rejects, as they're separate steps in the chain.

asyncThing1().then(function() {
    return asyncThing2();
  }).then(function() {
    return asyncThing3();
  }).catch(function(err) {
    return asyncRecovery1();
  }).then(function() {
    return asyncThing4();
  }, function(err) {
    return asyncRecovery2();
  }).catch(function(err) {
    console.log("Don't worry about it");
  }).then(function() {
    console.log("All done!");
  })

  